
package es.caib.sistra.ws.v2.services;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "SistraConsentimentFacadeService", targetNamespace = "urn:es:caib:sistra:ws:v2:services", wsdlLocation = "file:/D:/dades/dades/CarpetesPersonals/ProgramacioPortaFIB3/pinbaladmin2/pinbaladmin-ws/domini-sistra-api/pinbaladmin_ws_dominisistra_consentiment.wsdl")
public class SistraConsentimentFacadeService
    extends Service
{

    private final static URL SISTRACONSENTIMENTFACADESERVICE_WSDL_LOCATION;
    private final static WebServiceException SISTRACONSENTIMENTFACADESERVICE_EXCEPTION;
    private final static QName SISTRACONSENTIMENTFACADESERVICE_QNAME = new QName("urn:es:caib:sistra:ws:v2:services", "SistraConsentimentFacadeService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("file:/D:/dades/dades/CarpetesPersonals/ProgramacioPortaFIB3/pinbaladmin2/pinbaladmin-ws/domini-sistra-api/pinbaladmin_ws_dominisistra_consentiment.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        SISTRACONSENTIMENTFACADESERVICE_WSDL_LOCATION = url;
        SISTRACONSENTIMENTFACADESERVICE_EXCEPTION = e;
    }

    public SistraConsentimentFacadeService() {
        super(__getWsdlLocation(), SISTRACONSENTIMENTFACADESERVICE_QNAME);
    }

    public SistraConsentimentFacadeService(WebServiceFeature... features) {
        super(__getWsdlLocation(), SISTRACONSENTIMENTFACADESERVICE_QNAME, features);
    }

    public SistraConsentimentFacadeService(URL wsdlLocation) {
        super(wsdlLocation, SISTRACONSENTIMENTFACADESERVICE_QNAME);
    }

    public SistraConsentimentFacadeService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SISTRACONSENTIMENTFACADESERVICE_QNAME, features);
    }

    public SistraConsentimentFacadeService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SistraConsentimentFacadeService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns SistraConsentimentFacade
     */
    @WebEndpoint(name = "SistraConsentimentFacade")
    public SistraConsentimentFacade getSistraConsentimentFacade() {
        return super.getPort(new QName("urn:es:caib:sistra:ws:v2:services", "SistraConsentimentFacade"), SistraConsentimentFacade.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SistraConsentimentFacade
     */
    @WebEndpoint(name = "SistraConsentimentFacade")
    public SistraConsentimentFacade getSistraConsentimentFacade(WebServiceFeature... features) {
        return super.getPort(new QName("urn:es:caib:sistra:ws:v2:services", "SistraConsentimentFacade"), SistraConsentimentFacade.class, features);
    }

    private static URL __getWsdlLocation() {
        if (SISTRACONSENTIMENTFACADESERVICE_EXCEPTION!= null) {
            throw SISTRACONSENTIMENTFACADESERVICE_EXCEPTION;
        }
        return SISTRACONSENTIMENTFACADESERVICE_WSDL_LOCATION;
    }

}
